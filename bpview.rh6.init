#!/bin/bash
#
#	/etc/rc.d/init.d/bpviewd
#
# bpview	This starts and stops bpviewd
#
# description:	bpviewd is a daemon for bpview applications	
#
# processname:	/usr/bin/bpviewd
# config:	/etc/bpviewd.yml
# pidfile:	/var/run/bpviewd.pid
# Source function library.

### BEGIN INIT INFO
# Provides:
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: start and stop bpviewd
# Description: bpviewd is a daemon for bpview applications
### END INIT INFO

. /etc/init.d/functions
PATH=/sbin:/bin:/usr/bin:/usr/sbin
RETVAL=0
PROG_BIN="/usr/bin/bpviewd"
PROG="bpviewd"
PID_FILE="/var/run/bpviewd.pid"

start() {
	[ -f $PROG_BIN ] || exit 5
	# this is suitable way considering SELinux is guarding write
	# access to PID file
	[ $EUID -eq 0 ] || exit 4

   	echo -n $"Starting $PROG: "

	daemon $PROG --pidfile $PID_FILE
	RETVAL=$?
	
	echo
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/$PROG
	return $RETVAL
}	

stop() {
	echo -n "Shutting down $PROG: "
	killproc -p $PID_FILE $PROG
	RETVAL=$?
	# if we are in halt or reboot runlevel kill all running sessions
	# so the TCP connections are closed cleanly
	if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
	    trap '' TERM
	    killall $PROG 2>/dev/null
	    trap TERM
	fi
	[ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$PROG
	echo
	return $RETVAL
}

rh_status() {
	status -p $PID_FILE $PROG
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
    start)
    	rh_status_q && exit 0
		start
	;;
    stop)
		stop
	;;
    status)
    	rh_status
    	RETVAL=$?
	;;
    restart)
    	stop
		start
	;;
    reload)
    	stop
    	start
	;;
    condrestart)
#		[ -f /var/lock/subsys/$PROG ] && restart || :
	;;
    probe)
	;;
    *)
	echo "Usage: <servicename> {start|stop|status|reload|restart[|probe]"
	exit 1
	;;
esac
exit $RETVAL